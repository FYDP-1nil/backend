syntax = "proto3"; 

import "basketball.proto";
import "gridiron.proto";

package stats; 

service Stats {
    // Soccer read operations
    rpc GetShots (GetShotsRequest) returns (GetShotsResponse);
    rpc GetFouls (GetFoulsRequest) returns (GetFoulsResponse); 
    rpc GetOffsides (GetOffsidesRequest) returns (GetOffsidesResponse); 
    
    // Soccer write operations
    rpc CreateGame (CreateGameRequest) returns (CreateGameResponse);
    rpc SetShot (SetShotRequest) returns (SetShotResponse);
    rpc SetFoul (SetFoulRequest) returns (SetFoulResponse);
    rpc SetOffside (SetOffsideRequest) returns (SetOffsideResponse);
    rpc SetEndGame (SetEndGameRequest) returns (SetEndGameResponse);
    rpc SetEvent (SetEventRequest) returns (SetEventResponse);

    // Basketball read operations
    // rpc GetBasketballPoints(GetBasketballPointsRequest) returns (GetBasketballPointsResponse);
    // rpc GetBasketballSteals(GetBasketballStealsRequest) returns (GetBasketballStealsResponse);
    // rpc GetBasketballBlocks(GetBasketballBlocksRequest) returns (GetBasketballBlocksResponse);
    // rpc GetBasketballFouls(GetBasketballFoulsRequest) returns (GetBasketballFoulsResponse);
    // rpc GetBasketballTurnovers(GetBasketballTurnoversRequest) returns (GetBasketballTurnoversResponse);
    // rpc GetBasketballRebounds(GetBasketballReboundsRequest) returns (GetBasketballReboundsResponse);

    // Basketball write operations
    rpc CreateBasketballGame(CreateBasketballGameRequest) returns (CreateBasketballGameResponse);
    rpc SetBasketballEvent(SetBasketballEventRequest) returns(SetBasketballEventResponse);
    rpc SetBasketballPoint(SetBasketballPointRequest) returns(SetBasketballPointResponse); 
    rpc SetBasketballSteal(SetBasketballStealRequest) returns(SetBasketballStealResponse); 
    rpc SetBasketballBlock(SetBasketballBlockRequest) returns(SetBasketballBlockResponse); 
    rpc SetBasketballFoul(SetBasketballFoulRequest) returns(SetBasketballFoulResponse); 
    rpc SetBasketballTurnover(SetBasketballTurnoverRequest) returns(SetBasketballTurnoverResponse); 
    rpc SetBasketballGameEnd(SetBasketballGameEndRequest) returns(SetBasketballGameEndResponse); 
    rpc SetBasketballRebound(SetBasketballReboundRequest) returns(SetBasketballReboundResponse); 

    // Basketball Game-centric stats operations 
    rpc GetFieldGoalPercentage(GetFieldGoalPercentageRequest) returns (GetFieldGoalPercentageResponse);
    rpc GetThreePointPercentage(GetThreePointPercentageRequest) returns (GetThreePointPercentageResponse);
    rpc GetFreeThrowsMade(GetFreeThrowsMadeRequest) returns (GetFreeThrowsMadeResponse);
    rpc GetTotalTurnoversByTeam(GetTotalTurnoversByTeamRequest) returns (GetTotalTurnoversByTeamResponse);
    rpc GetTotalStealsByTeam(GetTotalStealsByTeamRequest) returns (GetTotalStealsByTeamResponse);

    // Basketball League-centric stats operations
    rpc GetTopFivePlayersByPointsPerGame(GetTopFivePlayersByPointsPerGameRequest) returns (GetTopFivePlayersByPointsPerGameResponse);
    rpc GetTopFivePlayersByReboundsPerGame(GetTopFivePlayersByReboundsPerGameRequest) returns (GetTopFivePlayersByReboundsPerGameResponse);
    rpc GetTopFivePlayersByAssistsPerGame(GetTopFivePlayersByAssistsPerGameRequest) returns (GetTopFivePlayersByAssistsPerGameResponse);
    rpc GetTopFivePlayersByBlocksPerGame(GetTopFivePlayersByBlocksPerGameRequest) returns (GetTopFivePlayersByBlocksPerGameResponse);
    rpc GetTopFivePlayersByStealsPerGame(GetTopFivePlayersByStealsPerGameRequest) returns (GetTopFivePlayersByStealsPerGameResponse);
    rpc GetTopFivePlayersByFieldGoalPercentage(GetTopFivePlayersByFieldGoalPercentageRequest) returns (GetTopFivePlayersByFieldGoalPercentageResponse);
    rpc GetTopFivePlayersBy3ptPercentage(GetTopFivePlayersBy3ptPercentageRequest) returns (GetTopFivePlayersBy3ptPercentageResponse);
    rpc GetTopFivePlayersByFreeThrowPercentage(GetTopFivePlayersByFreeThrowPercentageRequest) returns (GetTopFivePlayersByFreeThrowPercentageResponse);

    // Gridiron read operations 
    // Todo 

    // Gridiron write operations 
    rpc CreateGridironGame(CreateGridironGameRequest) returns (CreateGridironGameResponse);
    rpc SetGridironEvent(SetGridironEventRequest) returns (SetGridironEventResponse);
    rpc SetGridironRush(SetGridironRushRequest) returns (SetGridironRushResponse);
    rpc SetGridironThrow(SetGridironThrowRequest) returns (SetGridironThrowResponse);
    rpc SetGridironKick(SetGridironKickRequest) returns (SetGridironKickResponse);
    rpc SetGridironGameEnd(SetGridironGameEndRequest) returns (SetGridironGameEndResponse);
    
    // Gridiron game centric stats operations
    rpc GetTotalRushingYards(GetTotalRushingYardsRequest) returns (GetTotalRushingYardsResponse);
    rpc GetTotalPassingYards(GetTotalPassingYardsRequest) returns (GetTotalPassingYardsResponse);
    rpc GetAvgYardsPerPlay(GetAvgYardsPerPlayRequest) returns (GetAvgYardsPerPlayResponse);
    rpc GetTotalTouchdowns(GetTotalTouchdownsRequest) returns (GetTotalTouchdownsResponse);
    rpc GetTotalTurnovers(GetTotalTurnoversRequest) returns (GetTotalTurnoversResponse);

    // Gridiron league centric stats operations 
    rpc GetTopFivePlayersByRushingYards(GetTopFivePlayersByRushingYardsRequest) returns (GetTopFivePlayersByRushingYardsResponse);
    rpc GetTopFivePlayersByReceivingYards(GetTopFivePlayersByReceivingYardsRequest) returns (GetTopFivePlayersByReceivingYardsResponse);
    rpc GetTopFivePlayersByThrowingYards(GetTopFivePlayersByThrowingYardsRequest) returns (GetTopFivePlayersByThrowingYardsResponse);
    rpc GetTopFivePlayersByKicksMade(GetTopFivePlayersByKicksMadeRequest) returns (GetTopFivePlayersByKicksMadeResponse);
    rpc GetTopFivePlayersByCompletionPercentage(GetTopFivePlayersByCompletionPercentageRequest) returns (GetTopFivePlayersByCompletionPercentageResponse);
    
}

message CreateGameRequest {
    string leagueId = 1;
    string homeTeam = 2;
    string awayTeam = 3;
}

message CreateGameResponse {
    string gameId = 1;
}   

// read operations
message GetShotsRequest {
    string gameId = 1;
}

message GetShotsResponse {

    repeated Shot teamFor = 1;
    repeated Shot teamAgainst = 2;
    
}

message GetFoulsRequest {
    string gameId = 1;
}

message GetFoulsResponse {
    
    repeated Foul teamFor = 1;
    repeated Foul teamAgainst = 2; 
}


message GetOffsidesRequest {
    string gameId = 1;
}

message GetOffsidesResponse {

    repeated Offside teamFor = 1;
    repeated Offside teamAgainst = 2;
}

// write operations
message SetShotRequest {
    string gameId = 1;
    // team striking the shot 
    string teamFor = 2; 
    // team defending struck shot 
    string teamAgainst = 3;

    Shot shotDetails = 4;
}

message SetShotResponse {
    bool success = 1;
}

message SetFoulRequest {
    string gameId = 1; 
    // team committing foul
    string teamFor = 2;
    string teamAgainst = 3;

    Foul foulDetails = 4;
}

message SetFoulResponse {
    bool success = 1;
}

message SetOffsideRequest {
    string gameId = 1;
    string teamFor = 2; 
    string teamAgainst = 3;

    Offside offsideDetails = 4;
}

message SetEndGameRequest {
    string gameId = 1;
    int32 goalsHome = 2;
    int32 goalsAway = 3;
}

message SetOffsideResponse {
    bool success = 1;
}

message SetEndGameResponse {
    bool success = 1;
}

message SetEventRequest {
    string eventType = 1;
    string gameId = 2;
    // send the event payload as string  
    // this event will be stored as a string in the db
    // not sure if there is a specific way to have blobs in json 
    string event = 3;
}

message SetEventResponse {
    bool success = 1;
}

////////////////////////////////

message Foul {
    bool isYellow = 1;
    bool isRed = 2;
    string player = 3; 
    string reason = 4;
    int32 time = 5;
}

message Shot {
    bool isGoal = 1;
    bool isOnTarget = 2;
    string scorer = 3;
    string assist = 4; 
    int32 time = 5;
}

message Offside {
    int32 time = 1;
} 