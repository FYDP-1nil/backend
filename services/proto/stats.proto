syntax = "proto3"; 

package stats; 

service Stats {
    rpc CreateGame (CreateGameRequest) returns (CreateGameResponse);
    
    // read operations
    rpc GetShots (GetShotsRequest) returns (GetShotsResponse);
    rpc GetFouls (GetFoulsRequest) returns (GetFoulsResponse); 
    rpc GetOffsides (GetOffsidesRequest) returns (GetOffsidesResponse); 

    // write operations
    rpc SetShot (SetShotRequest) returns (SetShotResponse);
    rpc SetFoul (SetFoulRequest) returns (SetFoulResponse);
    rpc SetOffside (SetOffsideRequest) returns (SetOffsideResponse);
    rpc SetEvent (SetEventRequest) returns (SetEventResponse);
}

message CreateGameRequest {
    string homeTeam = 1; 
    string awayTeam = 2;
    string userId = 3;
}

message CreateGameResponse {
    string gameId = 1;
}   

// read operations
message GetShotsRequest {
    string gameId = 1;
}

message GetShotsResponse {

    repeated Shot teamFor = 1;
    repeated Shot teamAgainst = 2;
    
}

message GetFoulsRequest {
    string gameId = 1;
}

message GetFoulsResponse {
    
    repeated Foul teamFor = 1;
    repeated Foul teamAgainst = 2; 
}


message GetOffsidesRequest {
    string gameId = 1;
}

message GetOffsidesResponse {

    repeated Offside teamFor = 1;
    repeated Offside teamAgainst = 2;
}

// write operations
message SetShotRequest {
    string gameId = 1;
    // team striking the shot 
    string teamFor = 2; 
    // team defending struck shot 
    string teamAgainst = 3;

    Shot shotDetails = 4;
}

message SetShotResponse {
    bool success = 1;
}

message SetFoulRequest {
    string gameId = 1; 
    // team committing foul
    string teamFor = 2;
    string teamAgainst = 3;

    Foul foulDetails = 4;
}

message SetFoulResponse {
    bool success = 1;
}

message SetOffsideRequest {
    string gameId = 1;
    string teamFor = 2; 
    string teamAgainst = 3;

    Offside offsideDetails = 4;
}

message SetOffsideResponse {
    bool success = 1;
}

message SetEventRequest {
    string eventType = 1;
    string gameId = 2;
    // send the event payload as string  
    // this event will be stored as a string in the db
    // not sure if there is a specific way to have blobs in json 
    string event = 3;
}

message SetEventResponse {
    bool success = 1;
}

////////////////////////////////

message Foul {
    bool isYellow = 1;
    bool isRed = 2;
    string player = 3; 
    string reason = 4;
    int32 time = 5;
}

message Shot {
    bool isGoal = 1;
    bool isOnTarget = 2;
    string scorer = 3;
    string assist = 4; 
    int32 time = 5;
}

message Offside {
    int32 time = 1;
} 